# -*- coding: utf-8 -*-
"""DS 5020 Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GlYiZufmcvCaEFUG8if5QXaZ3GBLiDgO
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D

# Load & clean
path = '/content/redfin_2025-07-06-09-06-07.csv'
df = pd.read_csv(path)
df.columns = df.columns.str.strip()

# Clean numeric fields
df['square_feet'] = df['SQUARE FEET'].astype(str).str.replace(r'[^\d.]', '', regex=True)
df['square_feet'] = pd.to_numeric(df['square_feet'], errors='coerce').fillna(0)

df['price_clean'] = df['PRICE'].astype(str).str.replace(r'[^\d.]', '', regex=True)
df['list_price'] = pd.to_numeric(df['price_clean'], errors='coerce').fillna(0)

df['bedrooms'] = pd.to_numeric(df['BEDS'], errors='coerce').fillna(0)

# Build feature matrix
features = ['square_feet', 'bedrooms', 'list_price']
X = df[features]

# Standardize and apply SVD
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# SVD -> Truncated SVD & project features into latent space
svd = TruncatedSVD(n_components=3, random_state=42)
latent = svd.fit_transform(X_scaled)

# Cosine‐similarity matrix
sim_matrix = cosine_similarity(latent)

# Recommendation function
def recommend_for_input(square_ft, bedrooms, list_price, top_n=5):
    user_vec = np.array([[square_ft, bedrooms, list_price]])
    user_scaled = scaler.transform(user_vec)
    user_latent = svd.transform(user_scaled)
    simularity = cosine_similarity(user_latent, latent)[0]
    top_idxs = np.argsort(simularity)[::-1][:top_n] # slice top_n of similar properties
    return [
        {
          'index':      int(i),
          'score':      float(simularity[i]),
          'square_feet': float(df.at[i,'square_feet']),
          'bedrooms':   int(df.at[i,'bedrooms']),
          'list_price': float(df.at[i,'list_price']),
          'address':    df.at[i,'ADDRESS']
        }
        for i in top_idxs
    ]

# User Input for Mortgage
annual_income = float(input("What is your annual income? "))
annual_expenses = float(input("What are your annual expenses? "))
debt = float(input("Total annual debt (loans, cards, etc.)? "))
interest_rate = float(input("Mortgage interest rate (e.g. 0.065 for 6.5%)? "))

# Mortgage affordability calculator
def calculate_affordable_mortgage(annual_income, annual_expenses, debt, interest_rate):
    monthly_income = annual_income / 12
    monthly_expenses = annual_expenses / 12
    monthly_debt = debt / 12
    r = interest_rate / 12
    n = 30 * 12

# Industry Standard Formula for Calculating Max Mortgage
    max_total_payment = (monthly_income - monthly_expenses / 12) * 0.36
    max_mortgage_payment = max_total_payment - monthly_debt

    loan_amount = max_mortgage_payment * ((1 + r) ** n - 1) / (r * (1 + r) ** n)
    return round(loan_amount, 2)

# Assign mortgage_affordability var to function calculate_affordable_mortgage
Mortgage_affordability = calculate_affordable_mortgage(
    annual_income,
    annual_expenses,
    debt,
    interest_rate
)

# Print mortgage affordability calculation
print("You can afford a mortgage of: ",(Mortgage_affordability))

# User input
user_sqft = float(input("Desired square footage? "))
user_beds = float(input("Desired # of bedrooms? "))
user_prc = float(input("Desired list price? "))

# User input -> vector, scale, and transform into latent space
user_vec = np.array([[user_sqft, user_beds, user_prc]])
user_scaled = scaler.transform(user_vec)
user_latent = svd.transform(user_scaled)

# Calculate cosine similarity
similarity = cosine_similarity(user_latent, latent)[0]
top_idxs = np.argsort(similarity)[::-1][:5]

# Plot into 3D
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# All listings in latent space
ax.scatter(latent[:, 0], latent[:, 1], latent[:, 2],
           color='blue', alpha=0.4, label='All Listings')

# Plot Top 5 matches
top_latents = latent[top_idxs]
ax.scatter(top_latents[:, 0], top_latents[:, 1], top_latents[:, 2],
           color='green', s=80, label='Top Matches')

# For loop for identifying matches
# Applies text w/ ax.text for points in latent space
for i, idx in enumerate(top_idxs):
    addr = df.iloc[idx]['ADDRESS']
    ax.text(top_latents[i, 0], top_latents[i, 1], top_latents[i, 2],
            addr, color='green', fontsize=8)

# User input in latent space
ax.scatter(user_latent[0, 0], user_latent[0, 1], user_latent[0, 2],
           color='red', s=100, label='User Input')
ax.text(user_latent[0, 0], user_latent[0, 1], user_latent[0, 2],
        "User", color='red', fontsize=10)

# Labels for 3D model
ax.set_title("3D Projection via Truncated SVD")
ax.set_xlabel("Latent Dimension 1")
ax.set_ylabel("Latent Dimension 2")
ax.set_zlabel("Latent Dimension 3")
ax.legend()
ax.grid(True)
plt.tight_layout()
plt.show()

# Latent space breakdown for Feature Contributions table
component_df = pd.DataFrame(svd.components_.T,
                            index=features,
                            columns=[f"Latent Dim {i+1}" for i in range(3)])

print("")

# 1. Feature contributions table
print("Feature Contributions to Latent Dimensions (Vᵗ): Where [0.631, 0.587, 0.507] Is Eigenvector to the Corresponding Largest Eigenvalue\n")
print(component_df.round(3))

print("")

# 2. Explained variance
print("Singular Values (Σ): Square Roots of the Top 3 Eigenvalues from the Covariance Matrix")
print(svd.singular_values_)

print("")

# Variance ratio for singular values
print("Explained Variance Ratio:")
for i, ratio in enumerate(svd.explained_variance_ratio_):
    print(f"Latent Dim {i+1}: {ratio:.4f}")

print(f"Cumulative Explained Variance: {svd.explained_variance_ratio_.sum():.4f}")

# For loop - print recommendation to user
recommendation = recommend_for_input(user_sqft, user_beds, user_prc, top_n=5)
print("\nTop 5 matches:")
for rec in recommendation:
    print(f" • idx {rec['index']}, score {rec['score']:.3f}, "
          f"{rec['square_feet']:.0f} sqft, {rec['bedrooms']} beds, ${rec['list_price']:,.0f} – "
          f"{rec['address']}")

